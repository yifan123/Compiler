int prime[30100], used[30100];

int judge(int ary, int i, int n){
	if(ary == -1){
		if(i * i < n){
			return (1);
		}
	}
	return (0);
}

void Sieve(int n)
{
	int i, multi, index;
	i = 2;
	prime[0] = -1;
	prime[1] = -1;
	printf(n);
	if(i * i < n){
		printf(i);
		while (i * i < n){
			multi = 2;
			index = i * multi;
			if(index <=n){
				while(index <= n){
					prime[index] = -1;
					index = i * multi;
					printf("1");
					multi=multi+1;
				}
			}
			
			i=i+1;
			if(judge(prime[i], i, n)){
				while(judge(prime[i], i, n)) {
					i = i + 1;
					printf("2");
				}
			}
		}
	}
}

int mod(int a, int b){
	int c;
	c = a/b;
	return(a-c*b);
}

void calculate(int num)
{
	int i;
	i = 2;
	if(num != 1){
	while (num != 1) {
		if (mod(num,i) != 0) {
			while (prime[i] == -1) {
				i=i+1;
			} 
		}
		if (mod(num,i) == 0) {
			num =num / i;
			prime[i] = prime[i] + 1;
		}
	}
	}
}

void print(int n)
{
	int i;
	if (prime[2] != 1) {
		printf("2^", prime[2]);
	}
	if (prime[2] == 1) {
		printf("2");
	}
	i = 3;
	if(i <= n){
		while(i<=n){
			if (prime[i] > 1) {
			printf("*", i);
			printf("^", prime[i]);
			}
			if(prime[i] <= 1){
		if (prime[i] == 1) {
			printf("*", i);
		}}
			i = i + 1;
		}
	}
}

void main()
{
	int n, i;
	scanf(n);
	if (n == 1) {
		return;
	}
	Sieve(n);
	i = n;
	if(i>=2){
		while(i >=2){
			calculate(i);
			i = i  - 1;
		}
	}


	print(n);
	return;
}
